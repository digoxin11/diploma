import os
import pandas as pd
import osmnx as ox
import geopandas as gpd
from shapely.geometry import LineString
from sklearn.neighbors import BallTree
import numpy as np

# üìÅ –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å CSV-—Ñ–∞–π–ª–∞–º–∏
DATA_DIR = "traffic_data"
OUTPUT_DIR = "almaty_traffic_segmented_realistic"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª–∏—á–Ω—É—é —Å–µ—Ç—å –ê–ª–º–∞—Ç—ã
print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —É–ª–∏—Ü—ã –ê–ª–º–∞—Ç—ã...")
graph = ox.graph_from_place("Almaty, Kazakhstan", network_type="drive")
edges = ox.graph_to_gdfs(graph, nodes=False)
edges = edges.explode(index_parts=False).reset_index(drop=True)
edges["length"] = edges.geometry.length
edges = edges[edges["length"] > 100]  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ

# ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
for hour in range(24):
    print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–∞ {hour:02d}:00")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV
    csv_path = os.path.join(DATA_DIR, f"traffic_{hour:02d}.csv")
    df = pd.read_csv(csv_path)

    # –ü–æ—Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    coords_rad = np.deg2rad(df[["lat", "lon"]].values)
    tree = BallTree(coords_rad, metric='haversine')

    # –ì–æ—Ç–æ–≤–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã
    segments = []

    for _, row in edges.iterrows():
        line = row.geometry
        if line.geom_type != "LineString":
            continue
        mid = line.interpolate(0.5, normalized=True)
        mid_rad = np.deg2rad([[mid.y, mid.x]])

        dist, idx = tree.query(mid_rad, k=3)
        nearby = df.iloc[idx[0]]

        current = nearby["currentSpeed"].mean()
        freeflow = nearby["freeFlowSpeed"].mean()

        segments.append({
            "geometry": line,
            "speed_kmph": current,
            "freeFlowSpeed": freeflow,
            "name": row.get("name", "unknown")
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GeoJSON
    gdf = gpd.GeoDataFrame(segments, crs="EPSG:4326")
    out_path = os.path.join(OUTPUT_DIR, f"almaty_traffic_segmented_{hour:02d}.geojson")
    gdf.to_file(out_path, driver="GeoJSON")
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {out_path}")
